#!/bin/bash

# Tests for Serval LBARD
#
# Copyright 2016 Serval Project, Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

source "${0%/*}/../serval-dna/testframework.sh"
source "${0%/*}/../testdefs.sh"

setup() {
   # Configure four servald daemons without any interfaces connecting them, and
   # start them running.
   setup_servald
   assert_no_servald_processes
   foreach_instance +A +B +C +D create_single_identity
   foreach_instance +A +B +C +D start_servald_server
   get_servald_restful_http_server_port PORTA +A
   get_servald_restful_http_server_port PORTB +B
   get_servald_restful_http_server_port PORTC +C
   get_servald_restful_http_server_port PORTD +D
   # Start the fake radio daemon.
   fork %fakeradio fakecsmaradio 4 ttys.txt $1
   wait_until --timeout=15 eval [ '$(cat ttys.txt | wc -l)' -ge 4 ]
   tty1=$(sed -n 1p ttys.txt)
   tty2=$(sed -n 2p ttys.txt)
   tty3=$(sed -n 3p ttys.txt)
   tty4=$(sed -n 4p ttys.txt)
   # Start four lbard daemons.
   fork %lbardA lbard "$addr_localhost:$PORTA" lbard:lbard "$SIDA" "$tty1" announce pull
   fork %lbardB lbard "$addr_localhost:$PORTB" lbard:lbard "$SIDB" "$tty2" pull
   fork %lbardC lbard "$addr_localhost:$PORTC" lbard:lbard "$SIDC" "$tty3" pull
   fork %lbardD lbard "$addr_localhost:$PORTD" lbard:lbard "$SIDD" "$tty4" pull
}

configure_servald_server() {
   # Do not configure any network interfaces.
   executeOk_servald config \
      set rhizome.http.enable 1 \
      set api.restful.users.lbard.password lbard
}

teardown() {
   stop_all_servald_servers
   kill_all_servald_processes
   assert_no_servald_processes
   report_all_servald_servers
}

doc_One="A single bundle transfers to peers"
setup_One() {
   setup
   # Insert a file to server A
   set_instance +A
   rhizome_add_file file1 50
}
test_One() {
   # Test that the bundle arrives at servers B, C and D
   all_bundles_received() {
      bundle_received_by $BID:$VERSION +B &&
         bundle_received_by $BID:$VERSION +C &&
         bundle_received_by $BID:$VERSION +D
   }
   wait_until all_bundles_received
}

doc_Comm="Peers directly and indirectly connected receive bundles"
setup_Comm() {
   setup
   # Insert a file to server A
   set_instance +A
   rhizome_add_file file1 50
   BIDA=$BID
   VERSIONA=$VERSION
}
test_Comm() {
   # Test that the bundle arrives at servers B, and C from B
   all_bundles_received() {
      bundle_received_by $BIDA:$VERSIONA +B &&
      bundle_received_by $BIDB:$VERSIONB +C
   }
   wait_until all_bundles_received
}

doc_Data_replication="See if the replication of data is effective"
setup_Data_replication() {
    setup
   # Insert a file to server A
   set_instance +A
   rhizome_add_file file1 50
   BIDA=$BID
   VERSIONA=$VERSION
}
test_Data_replication() {
   # Test that the bundle arrives at servers B and C
   all_bundles_received() {
      bundle_received_by $BID:$VERSION +B &&
      bundle_received_by $BID:$VERSION +C 
   }
   wait_until all_bundles_received
}


doc_Manifest_transfer="See if the manifest is transferred"
setup_Manifest_transfer() {
    setup
    #Insert a file f1 of 4mb payload to server A
    #Insert a file f2 of 4mb payload to server B
    set_instance +A
    rhizome_add_file file1 4000000
    BIDA=$BID
    VERSIONA=$VERSION
    set_instance +B
    rhizome_add_file file2 4000000
}
test_Manifest_transfer() {
 # Test that the manifests have been transferred
   all_bundles_received() {
       bundle_received_by $BIDA:$VERSIONA +B
   }
   wait_until all_bundles_received
}

doc_Name="See if bundle 2 appears"
setup_Name() {
    setup
    #Insert a file f1 of 4mb payload to server A
    #Insert a file f2 with the same payload to server A
    #Insert a file f1 of 4 mb payload to server B
    #Files should be big enough so that the default timeout isnt enough
    set_instance +A
    rhizome_add_file f1 4000000
    BIDA1=$BID
    VERSIONA1=$VERSION
    rhizome_add_file f2 4000000
    BIDA2=$BID
    VERSIONA2=$VERSION
    set_instance +B
    cp f1 f1b
    rhizome_add_file f1b 4000000
}
test_Name() {
    # Test that the bundle 2 has arrived to B in approx. 60s which is the default timeout
    all_bundles_received() {
	bundle_received_by $BIDA1:$VERSIONA1 $BIDA2:$VERSIONA2 +B
    }
    wait_until all_bundles_received
}

doc_

runTests "$@"
